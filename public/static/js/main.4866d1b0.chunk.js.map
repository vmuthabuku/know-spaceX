{"version":3,"sources":["components/launchItem.js","components/key.js","components/launches.js","components/launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","Card","Group","style","width","Content","Header","className","classNames","text-success","text-danger","Meta","dist_default","format","extra","react_router_dom","to","concat","Button","fluid","basic","color","Keyy","marginBottom","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_esm","query","loading","error","data","console","log","launches","map","launchItem","marginTop","Component","LAUNCH_QUERY","launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","Description","client","ApolloClient","uri","App","Container","text","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4866d1b0.chunk.js","sourcesContent":["// import React from 'react'\n\n// function LaunchItem(props) {\n//        console.log(props.launch)\n//        return <div>test</div>\n    \n// }\n\n// export default LaunchItem\n\nimport React from 'react'\nimport { Button, Card } from 'semantic-ui-react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => (\n  <Card.Group>\n    <Card style={{width:\"100%\"}}>\n      <Card.Content>\n        <Card.Header><h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4> </Card.Header>\n        <Card.Meta> <Moment format=\"YYYY-DD-MM HH:mm\">{launch_date_local}</Moment></Card.Meta>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Link to={`/launch/${flight_number}`}> \n            <Button fluid basic color='green'>\n                Launch_Details\n            </Button>\n            </Link>\n         \n        </div>\n      </Card.Content>\n    </Card>\n  </Card.Group>\n)\n\nexport default LaunchItem\n","import React from 'react'\n\n function Keyy() {\n    return (\n        <div style={{marginBottom:\"4em\"}}>\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = success\n            </p> \n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = fail\n            </p>     \n            \n        </div>\n    )\n}\n\nexport default Keyy","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './launchItem'\nimport Keyy from './key'\nimport '../App.css'\n\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchQuery{\n        launches{\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n             <h2 className=\"topic\">Launches</h2>\n            <Keyy/>\n            <Query query={LAUNCHES_QUERY}>\n                {\n                    ({loading, error, data}) => {\n                        if (loading) return <h1>Loading</h1>\n                        if(error) console.log(error)\n                        console.log(data)\n                        return <Fragment>\n                            {\n                                data.launches.map(launch=>(\n                                    <LaunchItem style={{marginTop:\"2em\"}} key={launch.flight_number} launch={launch}/>\n                                ))\n                            }\n                        </Fragment>\n                    }\n                }\n            </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Card } from 'semantic-ui-react'\nimport { Query } from 'react-apollo'\n// import { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number:Int!){\n        launch(flight_number: $flight_number){\n            flight_number\n            mission_name\n            launch_year\n            launch_date_local\n            launch_success\n            rocket{\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\n\nexport default class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params\n        flight_number = parseInt(flight_number)\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({loading, error, data})=>{\n                            if(loading) return <h4>loading</h4>\n                            if(error) console.log(error)\n\n                            const {\n                            mission_name,\n                            flight_number,\n                            launch_year,\n                            launch_success,\n                            rocket: { rocket_id, rocket_name, rocket_type }\n                            } = data.launch;\n\n                            return(\n                                <Card.Group>\n    <Card style={{width:\"100%\"}}>\n      <Card.Content>\n        <Card.Header><h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4> </Card.Header>\n        <Card.Meta>launch_year: {launch_year}</Card.Meta>\n        <Card.Meta>flight_number{flight_number}</Card.Meta>\n      </Card.Content>\n      <Card.Content extra>\n      <Card.Header>\n          Rocket: {rocket_name}<hr></hr>\n          Rocket ID: {rocket_id}\n      </Card.Header>\n      <Card.Description>\n          Rocket Type: {rocket_type}\n      </Card.Description>\n        \n      </Card.Content>\n    </Card>\n  </Card.Group>\n                            )\n\n                        }\n                    }\n                </Query>\n\n\n            </Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Launches from './components/launches'\nimport Launch from './components/launch'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { Container } from 'semantic-ui-react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport './App.css';\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n})\n\nclass App extends Component {\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n      <Container className=\"container\" text>\n          <h1 className=\"topic\">SpaceX</h1>\n          <Route exact path=\"/\" component={Launches} />  \n          <Route exact path=\"/launch/:flight_number\" component={Launch} /> \n      </Container>\n      </Router>\n      \n      </ApolloProvider>\n      \n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}